// <auto-generated />
using System;
using Fuelflux.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fuelflux.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fuelflux.Core.Models.FuelStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("fuel_stations");
                });

            modelBuilder.Entity("Fuelflux.Core.Models.FuelTank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Allowance")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("volume");

                    b.Property<int>("FuelStationId")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_station_id");

                    b.Property<decimal>("Number")
                        .HasColumnType("numeric(3)")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("FuelStationId", "Number")
                        .IsUnique();

                    b.ToTable("fuel_tanks");
                });

            modelBuilder.Entity("Fuelflux.Core.Models.PumpController", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FuelStationId")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_station_id");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.HasIndex("FuelStationId");

                    b.ToTable("pump_controllers");
                });

            modelBuilder.Entity("Fuelflux.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Администратор системы",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Оператор АЗС",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Клиент",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Fuelflux.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Allowance")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("allowance");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Uid")
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Uid");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allowance = 0m,
                            Email = "maxirmx@sw.consulting",
                            FirstName = "Maxim",
                            LastName = "Samsonov",
                            Password = "$2b$12$eOXzlwFzyGVERe0sNwFeJO5XnvwsjloUpL4o2AIQ8254RT88MnsDi",
                            Patronymic = "",
                            RoleId = 1,
                            Uid = ""
                        });
                });

            modelBuilder.Entity("Fuelflux.Core.Models.FuelTank", b =>
                {
                    b.HasOne("Fuelflux.Core.Models.FuelStation", "FuelStation")
                        .WithMany("FuelTanks")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelStation");
                });

            modelBuilder.Entity("Fuelflux.Core.Models.PumpController", b =>
                {
                    b.HasOne("Fuelflux.Core.Models.FuelStation", "FuelStation")
                        .WithMany("PumpControllers")
                        .HasForeignKey("FuelStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelStation");
                });

            modelBuilder.Entity("Fuelflux.Core.Models.User", b =>
                {
                    b.HasOne("Fuelflux.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Fuelflux.Core.Models.FuelStation", b =>
                {
                    b.Navigation("FuelTanks");

                    b.Navigation("PumpControllers");
                });

            modelBuilder.Entity("Fuelflux.Core.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
